// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
}

model Student{
  id        String @id 
  username  String @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String?
  bloodType String 
  sex       UserSex
  createdAt DateTime  @default(now())
  parentId  String
  parent    Parent    @relation(fields: [parentId], references: [id])
  classsId  Int
  classs    Class    @relation(fields: [classsId], references: [id])
  gradeId   Int
  grade     Grade    @relation(fields: [gradeId], references: [id])
  attendaces Attendance[]
  results    Result[]
}

model Teacher{
  id        String @id 
  username  String @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String?
  bloodType String 
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects   Subject[]  
  lessons    Lesson[]
  classes     Class[]
}

model Parent{
  id        String @id 
  username  String @unique
  name      String
  surname   String
  email     String? @unique
  phone     String @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}
model Grade{
  id Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}
model Class{
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId], references: [id])
  lessons Lesson[]
  students Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  events Event[]
  announcements Announcement[]
}
model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}
model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime 
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]
}
model Assignment{
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}
model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}
model Exam {
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  endDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}
model Result {
  id Int @id @default(autoincrement())
  score Int
  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
}
model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  startDate DateTime
  endDate DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}
model Announcement {
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}